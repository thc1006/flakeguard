# Alertmanager Configuration for FlakeGuard
#
# Production-ready alerting with:
# - Multi-tier notification routing
# - Intelligent grouping and throttling
# - Escalation policies for critical alerts
# - Integration with multiple notification channels

global:
  # SMTP configuration for email notifications
  smtp_smarthost: 'localhost:587'
  smtp_from: 'flakeguard-alerts@company.com'
  smtp_auth_username: 'flakeguard-alerts@company.com'
  smtp_auth_password: 'smtp-password'
  
  # Default notification templates
  smtp_subject: '[{{ .Status | toUpper }}] FlakeGuard Alert: {{ .GroupLabels.alertname }}'
  
# Notification templates
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# ============================================================================
# Alert Routing Configuration
# ============================================================================

route:
  # Default grouping and timing
  group_by: ['alertname', 'service', 'component']
  group_wait: 30s        # Wait 30s for initial group
  group_interval: 5m     # Send updates every 5m for grouped alerts  
  repeat_interval: 12h   # Repeat notifications every 12h
  receiver: 'default-team'

  # Routing tree for different alert severities and components
  routes:
    # ============================================================================
    # Critical/Page Severity Routes
    # ============================================================================
    
    # API availability and 5xx errors - immediate escalation
    - match:
        severity: page
        service: flakeguard
      receiver: 'sre-oncall'
      group_wait: 10s         # Fast grouping for pages
      group_interval: 2m      # Quick updates
      repeat_interval: 5m     # Frequent repeats until resolved
      routes:
        # API-specific critical alerts
        - match:
            component: api
          receiver: 'api-team-critical'
          continue: true        # Also send to SRE on-call
        
        # Database connectivity issues
        - match:
            component: database  
          receiver: 'database-team-critical'
          continue: true

    # ============================================================================
    # Warning Severity Routes
    # ============================================================================
    
    # General warnings - business hours notification
    - match:
        severity: warning
        service: flakeguard
      receiver: 'dev-team-warnings'
      group_wait: 2m
      group_interval: 10m
      repeat_interval: 1h
      routes:
        # Ingestion pipeline warnings
        - match:
            component: ingestion
          receiver: 'ingestion-team'
          
        # Worker performance warnings  
        - match:
            component: worker
          receiver: 'backend-team'
          
        # Memory/resource warnings
        - match_re:
            alertname: '.*Memory.*|.*Resource.*'
          receiver: 'infrastructure-team'

    # ============================================================================
    # Info Severity Routes  
    # ============================================================================
    
    # Informational alerts - low priority, business hours only
    - match:
        severity: info
        service: flakeguard
      receiver: 'dev-team-info'
      group_wait: 10m
      group_interval: 30m  
      repeat_interval: 24h      # Daily summary

# ============================================================================
# Notification Receivers
# ============================================================================

receivers:
  # Default catch-all team
  - name: 'default-team'
    email_configs:
      - to: 'dev-team@company.com'
        subject: '[FlakeGuard] {{ .GroupLabels.alertname }}'
        body: |
          FlakeGuard Alert: {{ .GroupLabels.alertname }}
          
          Status: {{ .Status }}
          Alerts:
          {{ range .Alerts }}
          - {{ .Annotations.summary }}
            {{ .Annotations.description }}
          {{ end }}

  # ============================================================================
  # Critical Alert Receivers
  # ============================================================================
  
  # SRE on-call team - PagerDuty + SMS + Email
  - name: 'sre-oncall'
    # PagerDuty integration
    pagerduty_configs:
      - routing_key: 'EXAMPLE-PAGERDUTY-INTEGRATION-KEY'
        description: 'FlakeGuard {{ .GroupLabels.alertname }}'
        details:
          severity: '{{ .GroupLabels.severity }}'
          service: '{{ .GroupLabels.service }}'
          component: '{{ .GroupLabels.component }}'
          runbook: '{{ .Annotations.runbook_url }}'
          
    # Email backup
    email_configs:
      - to: 'sre-oncall@company.com'
        subject: '[CRITICAL] FlakeGuard: {{ .GroupLabels.alertname }}'
        
    # Slack integration for immediate visibility
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'
        channel: '#sre-alerts'
        title: 'FlakeGuard Critical Alert'
        text: |
          üö® **CRITICAL ALERT** üö®
          
          **Service**: {{ .GroupLabels.service }}
          **Component**: {{ .GroupLabels.component }}
          **Alert**: {{ .GroupLabels.alertname }}
          
          **Description**:
          {{ range .Alerts }}
          {{ .Annotations.description }}
          {{ end }}
          
          **Runbook**: {{ .Annotations.runbook_url }}
        send_resolved: true

  # API team critical alerts
  - name: 'api-team-critical'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'
        channel: '#api-team-alerts'
        title: 'API Critical Issue'
        text: |
          üî• **API CRITICAL ISSUE** üî•
          
          {{ range .Alerts }}
          **{{ .Annotations.summary }}**
          
          {{ .Annotations.description }}
          
          **Runbook**: {{ .Annotations.runbook_url }}
          {{ end }}

  # Database team critical alerts  
  - name: 'database-team-critical'
    email_configs:
      - to: 'dba-team@company.com'
        subject: '[CRITICAL] Database Issue - FlakeGuard'
    
    # OpsGenie for database team
    opsgenie_configs:
      - api_key: 'EXAMPLE-OPSGENIE-API-KEY'
        teams: ['database-team']
        priority: 'P1'
        description: 'FlakeGuard database critical issue'

  # ============================================================================
  # Warning Alert Receivers
  # ============================================================================
  
  # Development team warnings (business hours)
  - name: 'dev-team-warnings'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'
        channel: '#flakeguard-alerts'
        title: 'FlakeGuard Warning'
        text: |
          ‚ö†Ô∏è **Warning Alert** ‚ö†Ô∏è
          
          {{ range .Alerts }}
          **{{ .Annotations.summary }}**
          {{ .Annotations.description }}
          {{ end }}
        send_resolved: true
        
    # Business hours email (9 AM - 6 PM, Mon-Fri)  
    email_configs:
      - to: 'dev-team@company.com'
        subject: '[WARNING] FlakeGuard: {{ .GroupLabels.alertname }}'

  # Specialized team receivers
  - name: 'ingestion-team'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'  
        channel: '#ingestion-alerts'
        title: 'Ingestion Pipeline Issue'
        
  - name: 'backend-team'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'
        channel: '#backend-alerts'
        title: 'Worker Performance Issue'
        
  - name: 'infrastructure-team'
    email_configs:
      - to: 'infra-team@company.com'
        subject: '[INFRA] FlakeGuard Resource Alert'

  # ============================================================================
  # Info Alert Receivers
  # ============================================================================
  
  # Low-priority informational alerts
  - name: 'dev-team-info'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/EXAMPLE/EXAMPLE/EXAMPLE'
        channel: '#flakeguard-info'
        title: 'FlakeGuard Information'
        text: |
          ‚ÑπÔ∏è **Information** ‚ÑπÔ∏è
          
          {{ range .Alerts }}
          {{ .Annotations.summary }}
          {{ end }}
        send_resolved: false    # Don't spam resolved notifications for info alerts

# ============================================================================
# Inhibition Rules
# ============================================================================

inhibit_rules:
  # If API is down, don't alert on dependent services
  - source_match:
      alertname: 'FlakeGuardDatabaseConnectionDown'
    target_match:
      service: 'flakeguard'
    equal: ['service', 'component']
    
  # If there's a fast burn rate alert, suppress slow burn rate alerts
  - source_match:
      burn_rate: 'fast'  
    target_match:
      burn_rate: 'slow'
    equal: ['service', 'slo']
    
  # If service is in maintenance mode, suppress operational alerts
  - source_match:
      alertname: 'FlakeGuardMaintenanceMode'
    target_match_re:
      alertname: '(FlakeGuard.*|.*SLO.*)'
    equal: ['service']