// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Check Runs Rendering System > renderCheckRunOutput > should be consistent for snapshot testing > flaky-test-candidates-output 1`] = `
{
  "summary": "## Flaky Test Candidates

The following tests show patterns consistent with flaky behavior:

| Test Name | Fail Count | Rerun Pass Rate | Last Failed Run | Confidence |
|-----------|------------|-----------------|-----------------|------------|
| \`com\\.example\\.IntegrationTest\\.testDatabaseConnection\` | 7 | 65.0% | 2024/1/15 | 82.0% |
| \`com\\.example\\.UnitTest\\.testAsyncOperation\` | 3 | 88.0% | 2024/1/14 | 58.0% |

### What are flaky tests?

Flaky tests are tests that exhibit both passing and failing results without changes to the code. They can be caused by:

- **Race conditions** - Timing-dependent code execution
- **External dependencies** - Network calls, databases, file system
- **Resource contention** - Insufficient memory, CPU, or I/O
- **Non-deterministic behavior** - Random values, system time dependencies

### Recommended Actions

1. **Quarantine** high-confidence flaky tests to prevent CI instability
2. **Rerun** failed jobs to confirm flaky behavior
3. **Open issues** to track and fix root causes

*This analysis is generated by FlakeGuard based on historical test execution data.*",
  "title": "üîç FlakeGuard Analysis: 2 Flaky Test Candidates Detected",
}
`;

exports[`Check Runs Rendering System > renderCheckRunOutput > should be consistent for snapshot testing: flaky-test-candidates-output 1`] = `
{
  "summary": "## Flaky Test Candidates

The following tests show patterns consistent with flaky behavior:

| Test Name | Fail Count | Rerun Pass Rate | Last Failed Run | Confidence |
|-----------|------------|-----------------|-----------------|------------|
| \`com.example.IntegrationTest.testDatabaseConnection\` | 7 | 65.0% | 1/15/2024 | 82.0% |
| \`com.example.UnitTest.testAsyncOperation\` | 3 | 88.0% | 1/14/2024 | 58.0% |

### What are flaky tests?

Flaky tests are tests that exhibit both passing and failing results without changes to the code. They can be caused by:

- **Race conditions** - Timing-dependent code execution
- **External dependencies** - Network calls, databases, file system
- **Resource contention** - Insufficient memory, CPU, or I/O
- **Non-deterministic behavior** - Random values, system time dependencies

### Recommended Actions

1. **Quarantine** high-confidence flaky tests to prevent CI instability
2. **Rerun** failed jobs to confirm flaky behavior
3. **Open issues** to track and fix root causes

*This analysis is generated by FlakeGuard based on historical test execution data.*",
  "title": "üîç FlakeGuard Analysis: 2 Flaky Test Candidates Detected",
}
`;
