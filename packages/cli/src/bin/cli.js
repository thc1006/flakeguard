#!/usr/bin/env node

// Temporary JavaScript version for immediate use
// This will be replaced by compiled TypeScript

const { Command } = require('commander');
const chalk = require('chalk');
const inquirer = require('inquirer').default || require('inquirer');
const ora = require('ora');
const path = require('path');
const fs = require('fs').promises;

const program = new Command();

// Simple setup wizard implementation
class SimpleSetupWizard {
  constructor(options) {
    this.options = options;
  }

  async run() {
    console.log(chalk.cyan.bold('\nüõ†Ô∏è  FlakeGuard Setup Wizard'));
    console.log(chalk.cyan('=====================================\n'));
    
    if (this.options.dryRun) {
      console.log(chalk.yellow('‚ö†Ô∏è  Running in dry-run mode\n'));
    }

    console.log(chalk.white('Welcome to FlakeGuard!'));
    console.log(chalk.gray('This wizard will help you set up FlakeGuard for your project.\n'));

    const { proceed } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'proceed',
        message: 'Ready to begin setup?',
        default: true
      }
    ]);

    if (!proceed) {
      console.log(chalk.yellow('Setup cancelled.'));
      return;
    }

    await this.setupEnvironment();
    await this.generateConfig();
    await this.showCompletion();
  }

  async setupEnvironment() {
    console.log(chalk.blue.bold('\nEnvironment Configuration\n'));
    
    const envConfig = await inquirer.prompt([
      {
        type: 'list',
        name: 'nodeEnv',
        message: 'Select environment:',
        choices: ['development', 'production', 'staging', 'test'],
        default: 'development'
      },
      {
        type: 'number',
        name: 'port',
        message: 'API server port:',
        default: 3000
      },
      {
        type: 'input',
        name: 'host',
        message: 'API server host:',
        default: '0.0.0.0'
      }
    ]);

    this.config = envConfig;
  }

  async generateConfig() {
    console.log(chalk.blue.bold('\nGenerating Configuration\n'));
    
    const spinner = ora('Creating .env file...').start();
    
    const envContent = [
      '# FlakeGuard Configuration',
      '# Generated by FlakeGuard Setup Wizard',
      '',
      '# Database',
      'DATABASE_URL="postgresql://postgres:postgres@localhost:5432/flakeguard?schema=public"',
      '',
      '# Redis', 
      'REDIS_URL="redis://localhost:6379"',
      '',
      '# API Configuration',
      `PORT=${this.config.port}`,
      `HOST=${this.config.host}`,
      `NODE_ENV=${this.config.nodeEnv}`,
      '',
      '# Security - CHANGE THESE IN PRODUCTION!',
      'JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long',
      'API_KEY=your-api-key-minimum-16-chars',
      '',
      '# Feature Flags',
      'ENABLE_SLACK_APP=false',
      'ENABLE_GITHUB_WEBHOOKS=true',
      'ENABLE_QUARANTINE_ACTIONS=true',
      ''
    ].join('\n');

    if (!this.options.dryRun) {
      const envPath = path.join(process.cwd(), '.env');
      await fs.writeFile(envPath, envContent);
      spinner.succeed(`Configuration saved to ${envPath}`);
    } else {
      spinner.succeed('Configuration generated (dry-run mode)');
      console.log(chalk.gray('\n--- Configuration Preview ---'));
      console.log(envContent);
      console.log(chalk.gray('--- End Preview ---\n'));
    }
  }

  async showCompletion() {
    console.log(chalk.green.bold('\n‚úÖ Setup Complete!\n'));
    console.log(chalk.white('FlakeGuard has been configured successfully.\n'));
    
    console.log(chalk.bold('Next Steps:\n'));
    console.log(chalk.cyan('1.') + ' Start FlakeGuard: pnpm run dev');
    console.log(chalk.cyan('2.') + ' Configure your GitHub App (optional)');
    console.log(chalk.cyan('3.') + ' Set up Slack integration (optional)');
    console.log(chalk.cyan('4.') + ' Access the dashboard at http://localhost:' + this.config.port);
    
    console.log(chalk.blue('\nüìö For detailed setup instructions, visit:'));
    console.log(chalk.blue('   https://github.com/your-org/flakeguard/docs\n'));
  }
}

program
  .name('flakeguard-init')
  .description('FlakeGuard interactive setup wizard')
  .version('1.0.0')
  .option('-d, --dry-run', 'Run in dry-run mode without making changes')
  .option('-t, --transcript <file>', 'Save transcript log to file')
  .option('-l, --language <lang>', 'Set language (en|zh-TW)', 'en')
  .option('--verbose', 'Enable verbose output')
  .action(async (options) => {
    try {
      const wizard = new SimpleSetupWizard(options);
      await wizard.run();
    } catch (error) {
      console.error(chalk.red.bold('\n‚ùå Setup failed:'), error.message);
      process.exit(1);
    }
  });

program.parse();
