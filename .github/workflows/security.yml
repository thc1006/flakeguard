name: Security Scanning & Dependency Updates

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths:
      - '**/package.json'
      - '**/pnpm-lock.yaml'
      - '**/Dockerfile*'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [main]
    paths:
      - '**/package.json'
      - '**/pnpm-lock.yaml'
      - '**/Dockerfile*'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run comprehensive security scan'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.1'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # CodeQL Analysis for code security
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          pnpm audit --audit-level moderate --format json > audit-results.json || true
          cat audit-results.json

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

      - name: Upload Snyk results to GitHub
        if: env.SNYK_TOKEN
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # OSV Scanner using official reusable workflow
  osv-scan:
    name: OSV Scanner
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.1
    permissions:
      actions: read
      contents: read
      security-events: write
    with:
      scan-args: |-
        -r
        .

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          npx license-checker \
            --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;0BSD;Unlicense;CC0-1.0' \
            --production \
            --excludePrivatePackages \
            --json \
            --out license-report.json
          
          # Check for any prohibited licenses
          npx license-checker \
            --excludePackages 'test@1.0.0' \
            --excludePrivatePackages \
            --failOn 'GPL-2.0;GPL-3.0;AGPL-1.0;AGPL-3.0;LGPL-2.0;LGPL-2.1;LGPL-3.0;MPL-2.0'

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # Docker image security scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request' || inputs.full_scan
    strategy:
      matrix:
        app: [api, web, worker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          tags: flakeguard-${{ matrix.app }}:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: flakeguard-${{ matrix.app }}:security-scan
          format: 'sarif'
          output: 'trivy-${{ matrix.app }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.app }}.sarif'
          category: 'trivy-${{ matrix.app }}'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: flakeguard-${{ matrix.app }}:security-scan
          fail-build: false
          severity-cutoff: high

      - name: Run Docker Scout (if available)
        if: github.event_name != 'pull_request'
        run: |
          if command -v docker-scout &> /dev/null; then
            docker scout cves flakeguard-${{ matrix.app }}:security-scan --format sarif --output scout-${{ matrix.app }}.sarif
          else
            echo "Docker Scout not available, skipping"
          fi
        continue-on-error: true

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

      - name: Scan for hardcoded secrets
        run: |
          echo "Scanning for common secret patterns..."
          
          # Check for common secret patterns
          if grep -r -i -n \
            -e "password\s*=" \
            -e "secret\s*=" \
            -e "token\s*=" \
            -e "key\s*=" \
            -e "api_key\s*=" \
            -e "private_key" \
            -e "-----BEGIN" \
            --include="*.js" \
            --include="*.ts" \
            --include="*.json" \
            --include="*.env*" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            .; then
            echo "::warning::Potential secrets found in codebase"
          else
            echo "No hardcoded secrets detected"
          fi

  # SBOM Generation
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: flakeguard-sbom.spdx.json

      - name: Generate CycloneDX SBOM
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file flakeguard-sbom.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            flakeguard-sbom.spdx.json
            flakeguard-sbom.json
          retention-days: 90

  # Dependency update automation
  dependency-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Check for updates
        run: |
          # Update dependencies
          pnpm update --latest --recursive
          
          # Check if there are changes
          if git diff --quiet; then
            echo "No dependency updates available"
            echo "HAS_UPDATES=false" >> $GITHUB_ENV
          else
            echo "Dependency updates found"
            echo "HAS_UPDATES=true" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.HAS_UPDATES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/dependency-updates
          title: 'chore: automated dependency updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates generated by the security workflow.
            
            ### Changes
            - Updated dependencies to latest compatible versions
            - Maintained semver compatibility where possible
            
            ### Testing
            - [ ] CI tests pass
            - [ ] Security scans clear
            - [ ] No breaking changes detected
            
            **Note**: This is an automated PR. Please review changes carefully before merging.
            
            Generated by GitHub Actions workflow: `${{ github.workflow }}`
          commit-message: 'chore: update dependencies to latest versions'
          delete-branch: true
          labels: |
            dependencies
            automated
            security

  # Security report summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, osv-scan, license-check, docker-security-scan, secret-scan, sbom-generation]
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV Scanner | ${{ needs.osv-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅' || needs.docker-security-scan.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom-generation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY