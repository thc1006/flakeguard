name: CI - Lint, Test & Build

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution (for debugging)'
        type: boolean
        default: false
      test_pattern:
        description: 'Test pattern to run (optional)'
        type: string
        default: ''

env:
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: flakeguard_test
  REDIS_URL: redis://localhost:6379
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flakeguard_test
  JWT_SECRET: test-jwt-secret-minimum-32-characters-long-for-testing-only
  API_KEY: test-api-key-minimum-16-chars-for-testing
  LOG_LEVEL: error
  CI: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Resolve pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level high || echo "::warning::Security vulnerabilities found"
          
      # TruffleHog secret scanning with official marketplace inputs
      # For PR scans: uses base/head from pull_request payload
      # For push: compares against HEAD~1 for recent changes
      # Add excludes via .trufflehogignore file in repo root
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@v3.82.13
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || 'HEAD~1' }}
          head: ${{ github.event.pull_request.head.sha || 'HEAD' }}
          extra_args: --only-verified

      - name: Run license check
        run: |
          npx license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;0BSD' --production --excludePrivatePackages

  # Code quality checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Resolve pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Check Prettier formatting
        run: pnpm format:check

      - name: TypeScript type checking
        run: pnpm typecheck

  # Unit and integration tests with matrix strategy
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip_tests }}
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20']
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Resolve pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node-version }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter=@flakeguard/api generate

      - name: Run database migrations
        run: pnpm --filter=@flakeguard/api migrate:deploy
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Seed database
        run: pnpm --filter=@flakeguard/api seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run unit tests
        run: |
          if [ -n "${{ inputs.test_pattern }}" ]; then
            pnpm test --run --reporter=verbose -- ${{ inputs.test_pattern }}
          else
            pnpm test --run --reporter=verbose
          fi

      - name: Run integration tests
        run: pnpm --filter=@flakeguard/api test:integration
        env:
          USE_TEST_CONTAINERS: false

      - name: Generate test coverage
        if: matrix.node-version == '20'
        run: pnpm --filter=@flakeguard/api test:coverage

      - name: Upload coverage reports
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          directory: ./apps/api/coverage
          flags: api,unit
          name: api-coverage
          fail_ci_if_error: false

  # End-to-end tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Resolve pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter=@flakeguard/api exec playwright install --with-deps

      - name: Generate Prisma client
        run: pnpm --filter=@flakeguard/api generate

      - name: Run database migrations
        run: pnpm --filter=@flakeguard/api migrate:deploy
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Seed database
        run: pnpm --filter=@flakeguard/api seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build applications
        run: pnpm build

      - name: Start applications in background
        run: |
          pnpm --filter=@flakeguard/api start &
          pnpm --filter=@flakeguard/worker start &
          pnpm --filter=@flakeguard/web start &
          sleep 30
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run E2E tests
        run: pnpm --filter=@flakeguard/api test:e2e
        env:
          BASE_URL: http://localhost:3001
          API_URL: http://localhost:3000

      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            apps/api/test-results/
            apps/api/playwright-report/
          retention-days: 3

  # Build applications and Docker images
  build:
    name: Build & Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [security-scan, lint-and-format]
    strategy:
      matrix:
        app: [api, web, worker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Resolve pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.app }}
        run: |
          pnpm --filter=@flakeguard/shared build
          pnpm --filter=@flakeguard/${{ matrix.app }} build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ghcr.io/${{ github.repository }}-${{ matrix.app }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.app }}.sarif'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.app }}.sarif'
          category: 'trivy-${{ matrix.app }}'

  # Performance and load testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance benchmarks
        run: |
          pnpm --filter=@flakeguard/api test:benchmark
          pnpm --filter=@flakeguard/worker test:load

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            apps/api/benchmark-results/
            apps/worker/load-test-results/
          retention-days: 7

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test, e2e-tests, build]
    if: always()
    steps:
      - name: Check deployment readiness
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All checks passed - ready for deployment"
            echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          else
            echo "❌ Some checks failed - deployment not recommended"
            echo "Test result: ${{ needs.test.result }}"
            echo "E2E result: ${{ needs.e2e-tests.result }}"
            echo "Build result: ${{ needs.build.result }}"
            echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          fi

      - name: Create deployment status
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          if [[ "${{ env.DEPLOYMENT_READY }}" == "true" ]]; then
            echo "Creating successful deployment status"
          else
            echo "Creating failed deployment status"
            exit 1
          fi

  # Cleanup and summary
  cleanup:
    name: Cleanup & Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, lint-and-format, test, e2e-tests, build, performance-tests, deployment-check]
    steps:
      - name: Cleanup
        run: |
          docker system prune -af || true
          
      - name: Job Summary
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅' || '❌' }} ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result == 'success' && '✅' || needs.performance-tests.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Check | ${{ needs.deployment-check.result == 'success' && '✅' || '❌' }} ${{ needs.deployment-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY